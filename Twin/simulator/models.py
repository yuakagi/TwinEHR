import uuid
from django.db import models
from django.utils.translation import gettext_lazy as _
from clinical_records.models import Patients
from accounts.models import CustomUser


def generate_simulation_id():
    return uuid.uuid4().hex


# Create your models here.
class SimulationRequest(models.Model):
    # Serial ID (integer)
    request_id = models.AutoField(
        primary_key=True,
        verbose_name=_("request ID"),
    )
    # Simulation ID (generated by simulation API)
    simulation_id = models.CharField(
        max_length=32,
        default=generate_simulation_id,
        unique=True,
        editable=False,
        verbose_name=_("simulation ID"),
    )
    # User model
    user = models.ForeignKey(
        CustomUser,
        on_delete=models.PROTECT,
        verbose_name=_("user"),
        blank=False,
        null=False,
    )
    # Patient model
    patient_id = models.CharField(
        max_length=200,
        verbose_name=_("patient ID"),
        blank=False,
        null=False,
    )
    # Time horizon (number of days)
    time_horizon = models.IntegerField(
        blank=False,
        null=False,
        verbose_name=_("time horizon"),
    )
    # Starting time of simulation
    horizon_start = models.DateTimeField(
        null=False,
        blank=False,
        verbose_name=_("horizon start"),
    )
    # Number of iterations
    n_iter = models.IntegerField(
        blank=False,
        null=False,
        verbose_name=_("number of iterations"),
    )


class SimulationResult(models.Model):
    """Simulator results"""

    # Simulation request as foreign key
    request = models.ForeignKey(
        SimulationRequest,
        on_delete=models.CASCADE,
        verbose_name=_("simulation request"),
        blank=False,
        null=False,
    )
    # Record details
    simulation_number = models.IntegerField(
        blank=False,
        null=False,
        verbose_name=_("simulation number"),
    )
    type = models.IntegerField(
        blank=False,
        null=False,
        verbose_name=_("record type"),
    )
    timestamp = models.DateTimeField(null=False, blank=False, verbose_name=_("age"))
    code = models.CharField(max_length=100, blank=True, null=True)
    text = models.CharField(max_length=300, blank=True, null=True)
    result = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        # Set the table name explicitly
        db_table = "simulation_results"

    @classmethod
    def get_column_names(cls):
        """Returns column names for pandas DataFrame."""
        return [
            f.attname       # 'request_id' for FK, 'timestamp', ...
            for f in cls._meta.concrete_fields   # only real columns
            if f.attname!="id"
        ]
